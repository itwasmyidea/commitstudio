import { Octokit } from "@octokit/rest";
import chalk from "chalk";

/**
 * Post AI-generated comments to GitHub commits
 * @param {Object} options - Options for posting comments
 * @param {Array} options.results - Analysis results to post
 * @param {string} options.owner - Repository owner
 * @param {string} options.repo - Repository name
 * @param {Function} [options.onProgress] - Progress callback
 * @returns {Promise<Array>} Posted comments
 */
export async function postComments({ results, owner, repo, onProgress }) {
  if (!process.env.GITHUB_TOKEN) {
    console.log(
      chalk.yellow(
        "Warning: No GitHub token found in environment. Using the config token.",
      ),
    );
    // We will use the token from config, which is already validated in the main flow
  }

  // Use global token from successful authentication
  const token = process.env.GITHUB_TOKEN || global.githubToken;

  if (!token) {
    throw new Error("GitHub token is required to post comments.");
  }

  const octokit = new Octokit({
    auth: token,
  });

  const postedComments = [];

  // Post comments for each commit
  for (let i = 0; i < results.length; i++) {
    const result = results[i];

    if (onProgress) {
      onProgress(i + 1, results.length);
    }

    try {
      // Format the comment body
      const commentBody = formatCommentBody(result);

      // Post comment to GitHub
      const comment = await octokit.repos.createCommitComment({
        owner,
        repo,
        commit_sha: result.commitSha,
        body: commentBody,
      });

      postedComments.push({
        commitSha: result.commitSha,
        commentId: comment.data.id,
        url: comment.data.html_url,
      });

      console.log(
        chalk.green(
          `âœ“ Posted comment on commit ${result.commitSha.substring(0, 7)}`,
        ),
      );
    } catch (error) {
      console.error(
        chalk.red(
          `Failed to post comment on commit ${result.commitSha.substring(0, 7)}: ${error.message}`,
        ),
      );
    }
  }

  return postedComments;
}

/**
 * Format analysis result as a GitHub comment
 * @param {Object} result - AI analysis result
 * @returns {string} Formatted comment body
 */
function formatCommentBody(result) {
  let commentBody = `## ðŸ¤– CommitStudio AI Code Review\n\n`;

  if (result.summary) {
    commentBody += `### Summary\n${result.summary}\n\n`;
  }

  if (result.comments && result.comments.length > 0) {
    commentBody += `### Detailed Comments\n\n`;

    result.comments.forEach((comment) => {
      commentBody += `#### ${comment.file || "General"}\n`;

      if (comment.line) {
        commentBody += `Line ${comment.line}: `;
      }

      commentBody += `${comment.content}\n\n`;
    });
  }

  if (result.suggestions && result.suggestions.length > 0) {
    commentBody += `### Suggestions\n\n`;

    result.suggestions.forEach((suggestion) => {
      commentBody += `- ${suggestion}\n`;
    });

    commentBody += "\n";
  }

  // Add attribution
  commentBody += `---\n*Generated by [CommitStudio](https://github.com/aligeramy/commitstudio) - AI-powered code review tool*`;

  return commentBody;
}

/**
 * Check if a comment already exists for a commit
 * @param {string} commitSha - Commit SHA
 * @param {string} owner - Repository owner
 * @param {string} repo - Repository name
 * @returns {Promise<boolean>} True if comment exists
 */
export async function checkCommentExists(commitSha, owner, repo) {
  if (!process.env.GITHUB_TOKEN && !global.githubToken) {
    console.log(
      chalk.yellow("No GitHub token available. Assuming no existing comments."),
    );
    return false;
  }

  const token = process.env.GITHUB_TOKEN || global.githubToken;

  try {
    const octokit = new Octokit({
      auth: token,
    });

    // Get existing comments for the commit
    const { data: comments } = await octokit.repos.listCommentsForCommit({
      owner,
      repo,
      commit_sha: commitSha,
    });

    // Check if any comment is from CommitStudio
    return comments.some(
      (comment) =>
        comment.body.includes("CommitStudio AI Code Review") ||
        comment.body.includes("Generated by [CommitStudio]"),
    );
  } catch (error) {
    console.warn(
      `Warning: Could not check for existing comments on commit ${commitSha}: ${error.message}`,
    );
    return false;
  }
}
